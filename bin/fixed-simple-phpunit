#!/usr/bin/env php
<?php

/*
 * This file is part of the Symfony package.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

// Please update when phpunit needs to be reinstalled with fresh deps:
// Cache-Id-Version: 2018-11-20 15:30 UTC

error_reporting(-1);

// ------------------------------------------------------------------ //
// Helper Functions                                                   //
// ------------------------------------------------------------------ //

/**
 * Read environment variable from system or given phpunit config file.
 *
 * @param string $phpUnitConfigFile
 * @param string $name
 * @param bool|string $default
 *
 * @return bool|string
 */
$getEnvVar = function ($phpUnitConfigFile, $name, $default = false)
{
    $value = getenv($name);

    if (file_exists($phpUnitConfigFile)) {
        // Load phpunit config files and search for the env variable
        $phpUnitConfig = new DomDocument();
        $phpUnitConfig->load($phpUnitConfigFile);

        $var = new DOMXpath($phpUnitConfig);
        foreach ($var->query('//php/env[@name="'.$name.'"]') as $var) {
            $currentValue = $var->getAttribute('value');

            if ('true' === $var->getAttribute('force')) {
                return $currentValue;
            } elseif (false === $value) {
                return $currentValue;
            }
        }
    }

    if (false !== $value) {
        return $value;
    }

    return $default;
};

/**
 * Get the phpunit binary if not exist download phpunit install it with given configuration.
 *
 * @param string $PHP
 * @param callable $getEnvVar
 * @param string $phpUnitVersion
 * @param string|null $phpUnitConfigFile
 *
 * @return string
 */
$getPHPUnit = function ($PHP, $getEnvVar, $phpUnitVersion, $phpUnitConfigFile = null)
{
    // Get project root directory where composer.json exists
    static $root;

    if (!$root) {
        $root = getenv('SYMFONY_PHPUNIT_ROOT_DIRECTORY');

        if (!$root) {
            // Go the folders up until find a composer.json file
            $root = __DIR__;
            while (!file_exists($root.'/composer.json') || file_exists($root.'/DeprecationErrorHandler.php')) {
                if ($root === dirname($root)) {
                    break;
                }
                $root = dirname($root);
            }
        }
    }

    // Get directory where the phpunit versions get installed
    $PHPUNIT_DIR = $getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_DIR', $root.'/vendor/bin/.phpunit');

    $phpUnit = $PHPUNIT_DIR . '/phpunit-' . $phpUnitVersion;

    // make own phpunit version when dependencies are removed
    $SYMFONY_PHPUNIT_REMOVE = $getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_REMOVE', '');

    if ($SYMFONY_PHPUNIT_REMOVE) {
        $phpUnit .= '-remove-' . str_replace(['/', ' '], ['_', '-'], $SYMFONY_PHPUNIT_REMOVE);
    }

    $phpUnit .= '/phpunit';

    // If phpunit was installed before return path to binary.
    if (file_exists($phpUnit)) {
        return $phpUnit;
    }

    // Build a standalone phpunit without symfony/yaml nor prophecy by default
    $oldPwd = getcwd();

    // Get composer binary for phpunit installation
    $COMPOSER = file_exists($COMPOSER = $oldPwd.'/composer.phar') || ($COMPOSER = rtrim('\\' === DIRECTORY_SEPARATOR ? preg_replace('/[\r\n].*/', '', `where.exe composer.phar`) : `which composer.phar 2> /dev/null`))
        ? $PHP.' '.escapeshellarg($COMPOSER)
        : 'composer';

    @mkdir($PHPUNIT_DIR, 0777, true);
    chdir($PHPUNIT_DIR);

    $phpUnitDirectory = basename(dirname($phpUnit));
    $extractDirectory = getcwd() . '/extract-' . $phpUnitDirectory;

    if (file_exists($extractDirectory)) {
        passthru(sprintf('\\' === DIRECTORY_SEPARATOR ? 'rmdir /S /Q %s > NUL': 'rm -rf %s', "$extractDirectory.old"));
        rename($extractDirectory, "$extractDirectory.old");
        passthru(sprintf('\\' === DIRECTORY_SEPARATOR ? 'rmdir /S /Q %s': 'rm -rf %s', "$extractDirectory.old"));
    }

    passthru("$COMPOSER create-project --no-install --prefer-dist --no-scripts --no-plugins --no-progress --ansi phpunit/phpunit $extractDirectory \"$phpUnitVersion.*\"");
    chdir($extractDirectory);

    // Remove dependencies like symfony/yaml and prophecy
    if ($SYMFONY_PHPUNIT_REMOVE) {
        passthru("$COMPOSER remove --no-update ".$SYMFONY_PHPUNIT_REMOVE);
    }
    if (5.1 <= $phpUnitVersion && $phpUnitVersion < 5.4) {
        passthru("$COMPOSER require --no-update phpunit/phpunit-mock-objects \"~3.1.0\"");
    }
    if (file_exists($path = $root.'/vendor/symfony/phpunit-bridge')) {
        passthru("$COMPOSER require --no-update symfony/phpunit-bridge \"*@dev\"");
        passthru("$COMPOSER config repositories.phpunit-bridge path ".escapeshellarg(str_replace('/', DIRECTORY_SEPARATOR, $path)));
        if ('\\' === DIRECTORY_SEPARATOR) {
            file_put_contents('composer.json', preg_replace('/^( {8})"phpunit-bridge": \{$/m', "$0\n$1    ".'"options": {"symlink": false},', file_get_contents('composer.json')));
        }
    } else {
        passthru("$COMPOSER require --no-update symfony/phpunit-bridge \"*\"");
    }
    $prevRoot = getenv('COMPOSER_ROOT_VERSION');
    putenv("COMPOSER_ROOT_VERSION=$phpUnitVersion.99");
    // --no-suggest is not in the list to keep compat with composer 1.0, which is shipped with Ubuntu 16.04LTS
    $exit = proc_close(proc_open("$COMPOSER install --no-dev --prefer-dist --no-progress --ansi", [], $p, getcwd(), null, ['bypass_shell' => true]));
    putenv('COMPOSER_ROOT_VERSION'.(false !== $prevRoot ? '='.$prevRoot : ''));
    if ($exit) {
        exit($exit);
    }
    file_put_contents('phpunit', <<<'EOPHP'
<?php

define('PHPUNIT_COMPOSER_INSTALL', __DIR__.'/vendor/autoload.php');
require PHPUNIT_COMPOSER_INSTALL;

if (!class_exists('SymfonyBlacklistPhpunit', false)) {
    class SymfonyBlacklistPhpunit {}
}
if (class_exists('PHPUnit_Util_Blacklist')) {
    PHPUnit_Util_Blacklist::$blacklistedClassNames['SymfonyBlacklistPhpunit'] = 1;
    PHPUnit_Util_Blacklist::$blacklistedClassNames['SymfonyBlacklistSimplePhpunit'] = 1;
} else {
    PHPUnit\Util\Blacklist::$blacklistedClassNames['SymfonyBlacklistPhpunit'] = 1;
    PHPUnit\Util\Blacklist::$blacklistedClassNames['SymfonyBlacklistSimplePhpunit'] = 1;
}

Symfony\Bridge\PhpUnit\TextUI\Command::main();

EOPHP
    );

    // After finishing dependency install move directory to correct place
    rename($extractDirectory, $PHPUNIT_DIR . '/' . $phpUnitDirectory);

    chdir($oldPwd);

    return $phpUnit;
};

/**
 * Get the phpunit version from SYMFONY_PHPUNIT_VERSION env variable or the given phpunit config file.
 *
 * @param callable $getEnvVar
 * @param string|null $phpUnitConfigFile
 *
 * @return mixed|string
 */
$getPHPUnitVersion = function ($getEnvVar, $phpUnitConfigFile = null)
{
    if (PHP_VERSION_ID >= 70100) {
        // PHPUnit 7 is required for PHP 7.1+
        $phpUnitVersion = $getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_VERSION', '7.4');
    } elseif (PHP_VERSION_ID >= 70000) {
        // PHPUnit 6 does not support PHP 7.0
        $phpUnitVersion = $getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_VERSION', '6.5');
    } elseif (PHP_VERSION_ID >= 50600) {
        // PHPUnit 5 requires PHP 5.6+
        $phpUnitVersion = $getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_VERSION', '5.7');
    } else {
        $phpUnitVersion = '4.8';
    }

    return $phpUnitVersion;
};

/**
 * Find all phpunit config files by given arguments.
 *
 * bin/simple-phpunit -> return root phpunit config file
 * bin/simple-phpunit -c path/to/phpunit.xml.dist -> return given phpunit file
 * bin/simple-phpunit path/to/folder -> return all phpunit config files in given folder
 *
 * @param array $argv
 *
 * @return array
 */
$loadPHPUnitConfigFiles = function (&$argv) {
    $outputError = function($text, $exitCode = 1)
    {
        echo "\033[41m" . $text . "\033[0m" . PHP_EOL;

        exit($exitCode);
    };

    $phpUnitConfigFiles = [];

    // Use configuration file current folder when no arguments given
    if (!isset($argv[1])) {
        if (file_exists('phpunit.xml')) {
            $phpUnitConfigFiles[] = realpath('phpunit.xml');
        } elseif (file_exists('phpunit.xml.dist')) {
            $phpUnitConfigFiles[] = realpath('phpunit.xml.dist');
        } else {
            $outputError('No phpunit.xml.dist file found!');
        }

        return $phpUnitConfigFiles;
    }

    // Use config file when given it over -c or --configuration argument
    if (($configArgumentNr = array_search('-c', $argv))
        || ($configArgumentNr = array_search('--configuration', $argv)))
    {
        ++$configArgumentNr;

        if (!isset($argv[$configArgumentNr])) {
            $outputError('Please provide a configuration file when using "-c" argument!');

            exit(1);
        }

        $phpUnitConfigFiles[] = realpath($argv[$configArgumentNr]);

        // Following arguments are given manually to the phpunit process
        unset($argv[$configArgumentNr]);
        unset($argv[$configArgumentNr - 1]);

        return $phpUnitConfigFiles;
    }

    // If symfony if given set the folder to src/Symfony
    if (isset($argv[1]) && 'symfony' === $argv[1] && !file_exists('symfony') && file_exists('src/Symfony')) {
        $argv[1] = 'src/Symfony';
    }

    // Find all config file when folder given
    if (is_dir($argv[1])) {
        $finder = new RecursiveDirectoryIterator($argv[1], FilesystemIterator::KEY_AS_FILENAME | FilesystemIterator::UNIX_PATHS);
        $finder = new RecursiveIteratorIterator($finder);
        $finder->setMaxDepth(getenv('SYMFONY_PHPUNIT_MAX_DEPTH') ?: 3);

        foreach ($finder as $file => $fileInfo) {
            // Prefer phpunit.xml over phpunit.xml.dist file
            $component = dirname($fileInfo->getPathname());
            if ('phpunit.xml.dist' === $file && !isset($phpUnitConfigFiles[$component])) {
                $phpUnitConfigFiles[$component] = realpath($fileInfo->getPathname());
            } elseif ('phpunit.xml' === $file) {
                $phpUnitConfigFiles[$component] = realpath($fileInfo->getPathname());
            }
        }

        ksort($phpUnitConfigFiles);

        array_values($phpUnitConfigFiles);

        if (0 === count($phpUnitConfigFiles)) {
            $outputError('No configuration files found in: ' . getcwd() . $argv[1]);
        }

        unset($argv[1]); // $argv[1] should not provided to phpunit process
    } elseif(file_exists($argv[1])) {
        $phpUnitConfigFiles[] = $argv[1];

        unset($argv[1]); // $argv[1] should not provided to phpunit process
    }

    return $phpUnitConfigFiles;
};

// ------------------------------------------------------------------ //
// Helper Functions End                                               //
// ------------------------------------------------------------------ //

$argv = isset($_SERVER['argv']) ? $_SERVER['argv'] : array();
$PHP = defined('PHP_BINARY') ? PHP_BINARY : 'php';

$phpUnitConfigFiles = $loadPHPUnitConfigFiles($argv);

$runningProcs = array();
$exit = 0;

if (!isset($argv[1]) || 'install' !== $argv[1]) {
    array_splice($argv, 1, 0, array('--colors=always'));
}

$phpUnitVersion = $getPHPUnitVersion($getEnvVar);
$phpUnitConfigFile = null;

if (1 === count($phpUnitConfigFiles)) {
    // When only one phpunit config file run it directly in current process for streamed output
    $phpUnitConfigFile = reset($phpUnitConfigFiles);
    $phpUnitVersion = $getPHPUnitVersion($getEnvVar, $phpUnitConfigFile);
    $argv[] = '-c';
    $argv[] = $phpUnitConfigFile;
} else {
    foreach ($phpUnitConfigFiles as $phpUnitConfigFile) {
        $phpUnitVersion = $getPHPUnitVersion($getEnvVar, $phpUnitConfigFile);
        $phpUnit = $getPHPUnit($PHP, $getEnvVar, $phpUnitVersion, $phpUnitConfigFile);
        $component = dirname($phpUnitConfigFile);

        $cmd = sprintf('%s %s -c %s %s > %s/phpunit.stdout 2> %s/phpunit.stderr',
            escapeshellcmd($PHP),
            escapeshellcmd($phpUnit),
            escapeshellarg($phpUnitConfigFile),
            implode(' ', array_map('escapeshellarg', array_slice($argv, 1))),
            escapeshellarg($component),
            escapeshellarg($component)
        );

        if ($proc = proc_open($cmd, array(), $pipes)) {
            $runningProcs[$component] = $proc;
        } else {
            $exit = 1;
            echo "\033[41mKO\033[0m $component\n\n";
        }
    }
}

if (count($runningProcs)) {
    // Wait for the processes to be finished and output there result
    while ($runningProcs) {
        usleep(300000);
        $terminatedProcs = [];
        foreach ($runningProcs as $component => $proc) {
            $procStatus = proc_get_status($proc);
            if (!$procStatus['running']) {
                $terminatedProcs[$component] = $procStatus['exitcode'];
                unset($runningProcs[$component]);
                proc_close($proc);
            }
        }

        foreach ($terminatedProcs as $component => $procStatus) {
            foreach (['out', 'err'] as $file) {
                $file = "$component/phpunit.std$file";
                readfile($file);
                unlink($file);
            }

            // Fail on any individual component failures but ignore some error codes on Windows when APCu is enabled:
            // STATUS_STACK_BUFFER_OVERRUN (-1073740791/0xC0000409)
            // STATUS_ACCESS_VIOLATION (-1073741819/0xC0000005)
            // STATUS_HEAP_CORRUPTION (-1073740940/0xC0000374)
            if ($procStatus && ('\\' !== DIRECTORY_SEPARATOR || !extension_loaded('apcu') || !filter_var(ini_get('apc.enable_cli'), FILTER_VALIDATE_BOOLEAN) || !in_array($procStatus, [-1073740791, -1073741819, -1073740940]))) {
                $exit = $procStatus;
                echo "\033[41mKO\033[0m $component\n\n";
            } else {
                echo "\033[32mOK\033[0m $component\n\n";
            }
        }
    }
} elseif (isset($argv[1]) && 'install' === $argv[1] || file_exists('install')) {
    // If not yet installed install phpunit
    if (0 === count($phpUnitConfigFiles)) {
        $getPHPUnit($PHP, $getEnvVar, $phpUnitVersion, $phpUnitConfigFile);
    }
} else {
    // If only one configuration file is found call phpunit directly
    if (!class_exists('SymfonyBlacklistSimplePhpunit', false)) {
        class SymfonyBlacklistSimplePhpunit {}
    }

    $_SERVER['argv'] = $argv;
    $_SERVER['argc'] = ++$argc;
    include $getPHPUnit($PHP, $getEnvVar, $phpUnitVersion, $phpUnitConfigFile);
}

exit($exit);
