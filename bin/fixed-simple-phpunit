#!/usr/bin/env php
<?php

error_reporting(-1);

global $argv, $argc, $PHP;

$argv = isset($_SERVER['argv']) ? $_SERVER['argv'] : array();
$PHP = defined('PHP_BINARY') ? PHP_BINARY : 'php';
$cmd = array_map('escapeshellarg', $argv);

$phpUnitConfigFiles = loadPhpConfigFiles();

$runningProcs = array();
$exit = 0;

array_splice($argv, 1, 0, array('--colors=always'));

$phpUnitVersion = null;
$phpUnitConfigFile = null;

if (1 === count($phpUnitConfigFiles)) {
    // When only one phpunit config file run it directly in current process for streamed output
    $phpUnitConfigFile = reset($phpUnitConfigFiles);
    $phpUnitVersion = getPhpUnitVersion($phpUnitConfigFile);
    removePhpUnitDependencyConflicts($phpUnitConfigFile, $phpUnitVersion);
    $argv[] = '-c';
    $argv[] = $phpUnitConfigFile;
} else {
    unset($argv[0]);

    foreach ($phpUnitConfigFiles as $phpUnitConfigFile) {
        $phpUnitVersion = getPhpUnitVersion($phpUnitConfigFile);
        $phpUnit = getPhpUnit($phpUnitVersion, $phpUnitConfigFile);
        $folder = dirname($phpUnitConfigFile);

        $cmd = sprintf('%s %s -c %s %s --colors=always > %s/phpunit.stdout 2> %s/phpunit.stderr',
            escapeshellcmd($PHP),
            escapeshellcmd($phpUnit),
            escapeshellarg($phpUnitConfigFile),
            implode(' ', array_map('escapeshellarg', $argv)),
            escapeshellarg($folder),
            escapeshellarg($folder)
        );

        if ($proc = proc_open($cmd, array(), $pipes)) {
            $runningProcs[$folder] = $proc;
        } else {
            $exit = 1;
            echo "\033[41mKO\033[0m $folder\n\n";
        }
    }
}

if (count($runningProcs)) {
    $exit = runProcs($runningProcs);
} elseif (isset($argv[1]) && 'install' === $argv[1] || file_exists('install')) {
    // Only install phpunit
    getPhpUnit($phpUnitVersion, $phpUnitConfigFile);
} else {
    if (!class_exists('SymfonyBlacklistSimplePhpunit', false)) {
        class SymfonyBlacklistSimplePhpunit {}
    }

    $_SERVER['argv'] = $argv;
    $_SERVER['argc'] = ++$argc;
    include getPhpUnit($phpUnitVersion, $phpUnitConfigFile);
}

exit($exit);

// ----------------------------------------------------------
// ----------------------------------------------------------
// ----------------------------------------------------------

function runProcs($runningProcs)
{
    $exit = 0;

    while ($runningProcs) {
        usleep(300000);
        $terminatedProcs = array();
        foreach ($runningProcs as $component => $proc) {
            $procStatus = proc_get_status($proc);
            if (!$procStatus['running']) {
                $terminatedProcs[$component] = $procStatus['exitcode'];
                unset($runningProcs[$component]);
                proc_close($proc);
            }
        }

        foreach ($terminatedProcs as $component => $procStatus) {
            foreach (array('out', 'err') as $file) {
                $file = "$component/phpunit.std$file";
                readfile($file);
                unlink($file);
            }

            // Fail on any individual component failures but ignore some error codes on Windows when APCu is enabled:
            // STATUS_STACK_BUFFER_OVERRUN (-1073740791/0xC0000409)
            // STATUS_ACCESS_VIOLATION (-1073741819/0xC0000005)
            // STATUS_HEAP_CORRUPTION (-1073740940/0xC0000374)
            if ($procStatus && ('\\' !== DIRECTORY_SEPARATOR || !extension_loaded('apcu') || !ini_get('apc.enable_cli') || !in_array($procStatus, array(-1073740791, -1073741819, -1073740940)))) {
                $exit = $procStatus;
                echo "\033[41mKO\033[0m $component\n\n";
            } else {
                echo "\033[32mOK\033[0m $component\n\n";
            }
        }
    }

    return $exit;
}

function getPhpUnit($phpUnitVersion = null, $phpUnitConfigFile = null)
{
    if (null === $phpUnitVersion) {
        $phpUnitVersion = getPhpUnitVersion($phpUnitConfigFile);
    }

    $PHPUNIT_DIR = getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_DIR', getRootDirectory().'/vendor/bin/.phpunit');

    $phpUnit = $PHPUNIT_DIR . '/phpunit-' . $phpUnitVersion;

    // make own phpunit version when dependency is removed
    $SYMFONY_PHPUNIT_REMOVE = getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_REMOVE', '');

    if ($SYMFONY_PHPUNIT_REMOVE) {
        $phpUnit .= '-remove-' . str_replace(['/', ' '], ['_', '-'], $SYMFONY_PHPUNIT_REMOVE);
    }

    $phpUnit .= '/phpunit';

    if (!file_exists($phpUnit)) {
        loadPhpUnit($phpUnitVersion, $phpUnit, $SYMFONY_PHPUNIT_REMOVE);
    }

    return $phpUnit;
}

function loadPhpUnit($PHPUNIT_VERSION, $phpUnit, $SYMFONY_PHPUNIT_REMOVE)
{
    global $PHP;

    $PHPUNIT_DIR = dirname(dirname($phpUnit));

    // Build a standalone phpunit without symfony/yaml nor prophecy by default
    $root = getRootDirectory();

    $oldPwd = getcwd();

    $COMPOSER = file_exists($COMPOSER = $oldPwd.'/composer.phar') || ($COMPOSER = rtrim('\\' === DIRECTORY_SEPARATOR ? preg_replace('/[\r\n].*/', '', `where.exe composer.phar`) : `which composer.phar 2> /dev/null`))
        ? $PHP.' '.escapeshellarg($COMPOSER)
        : 'composer';

    @mkdir($PHPUNIT_DIR, 0777, true);
    chdir($PHPUNIT_DIR);

    $phpUnitDirectory = basename(dirname($phpUnit));

    if (file_exists($phpUnitDirectory)) {
        passthru(sprintf('\\' === DIRECTORY_SEPARATOR ? '(del /S /F /Q %s & rmdir %1$s) >nul': 'rm -rf %s', $phpUnitDirectory));
    }

    if (extension_loaded('openssl') && ini_get('allow_url_fopen') && !isset($_SERVER['http_proxy']) && !isset($_SERVER['https_proxy'])) {
        $remoteZip = "https://github.com/sebastianbergmann/phpunit/archive/$PHPUNIT_VERSION.zip";
        $remoteZipStream = @fopen($remoteZip, 'rb');
        if (!$remoteZipStream) {
            throw new \RuntimeException("Could not find $remoteZip");
        }
        stream_copy_to_stream($remoteZipStream, fopen("$PHPUNIT_VERSION.zip", 'wb'));
    } elseif ('\\' === DIRECTORY_SEPARATOR) {
        passthru("certutil -urlcache -split -f \"https://github.com/sebastianbergmann/phpunit/archive/$PHPUNIT_VERSION.zip\" $PHPUNIT_VERSION.zip");
    } else {
        @unlink("$PHPUNIT_VERSION.zip");
        passthru("wget -q https://github.com/sebastianbergmann/phpunit/archive/$PHPUNIT_VERSION.zip");

    }
    if (!class_exists('ZipArchive')) {
        throw new \Exception('simple-phpunit requires the "zip" PHP extension to be installed and enabled in order to uncompress the downloaded PHPUnit packages.');
    }

    $extractDirectory = getcwd() . '/extract-' . $phpUnitDirectory;

    $zip = new ZipArchive();
    $zip->open("$PHPUNIT_VERSION.zip");
    $zip->extractTo($extractDirectory);
    $zip->close();

    rename($extractDirectory . '/phpunit-'. $PHPUNIT_VERSION, getcwd() . '/' . $phpUnitDirectory);
    rmdir($extractDirectory);

    chdir($phpUnitDirectory);

    if ($SYMFONY_PHPUNIT_REMOVE) {
        passthru("$COMPOSER remove --no-update ".$SYMFONY_PHPUNIT_REMOVE);
    }
    if (5.1 <= $PHPUNIT_VERSION && $PHPUNIT_VERSION < 5.4) {
        passthru("$COMPOSER require --no-update phpunit/phpunit-mock-objects \"~3.1.0\"");
    }
    if (file_exists($path = $root.'/vendor/symfony/phpunit-bridge')) {
        passthru("$COMPOSER require --no-update symfony/phpunit-bridge \"*@dev\"");
        passthru("$COMPOSER config repositories.phpunit-bridge path ".escapeshellarg(str_replace('/', DIRECTORY_SEPARATOR, $path)));
        if ('\\' === DIRECTORY_SEPARATOR) {
            file_put_contents('composer.json', preg_replace('/^( {8})"phpunit-bridge": \{$/m', "$0\n$1    ".'"options": {"symlink": false},', file_get_contents('composer.json')));
        }
    } else {
        passthru("$COMPOSER require --no-update symfony/phpunit-bridge \"*\"");
    }
    $prevRoot = getenv('COMPOSER_ROOT_VERSION');
    putenv("COMPOSER_ROOT_VERSION=$PHPUNIT_VERSION.99");
    // --no-suggest is not in the list to keep compat with composer 1.0, which is shipped with Ubuntu 16.04LTS
    $exit = proc_close(proc_open("$COMPOSER install --no-dev --prefer-dist --no-progress --ansi", array(), $p, getcwd(), null, array('bypass_shell' => true)));
    putenv('COMPOSER_ROOT_VERSION'.(false !== $prevRoot ? '='.$prevRoot : ''));
    if ($exit) {
        exit($exit);
    }
    file_put_contents('phpunit', <<<'EOPHP'
<?php

define('PHPUNIT_COMPOSER_INSTALL', __DIR__.'/vendor/autoload.php');
require PHPUNIT_COMPOSER_INSTALL;

if (!class_exists('SymfonyBlacklistPhpunit', false)) {
    class SymfonyBlacklistPhpunit {}
}
if (class_exists('PHPUnit_Util_Blacklist')) {
    PHPUnit_Util_Blacklist::$blacklistedClassNames['SymfonyBlacklistPhpunit'] = 1;
    PHPUnit_Util_Blacklist::$blacklistedClassNames['SymfonyBlacklistSimplePhpunit'] = 1;
} else {
    PHPUnit\Util\Blacklist::$blacklistedClassNames['SymfonyBlacklistPhpunit'] = 1;
    PHPUnit\Util\Blacklist::$blacklistedClassNames['SymfonyBlacklistSimplePhpunit'] = 1;
}

Symfony\Bridge\PhpUnit\TextUI\Command::main();

EOPHP
    );
    chdir('..');
    file_put_contents(".$PHPUNIT_VERSION.md5", md5_file(__FILE__)."\n".$SYMFONY_PHPUNIT_REMOVE);
    chdir($oldPwd);
}

function removePhpUnitDependencyConflicts($phpUnitConfigFile, $phpUnitVersion)
{
    if ($SYMFONY_PHPUNIT_REMOVE = getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_REMOVE')) {
        // TODO remove composer conflicted dependencies
    }
}

function getRootDirectory()
{
    static $root;

    if (!$root) {
        $root = getenv('SYMFONY_PHPUNIT_ROOT_DIRECTORY');

        if ($root) {
            return $root;
        }

        // Go the folders up until find a composer.json file
        $root = __DIR__;
        while (!file_exists($root.'/composer.json') || file_exists($root.'/DeprecationErrorHandler.php')) {
            if ($root === dirname($root)) {
                break;
            }
            $root = dirname($root);
        }
    }

    return $root;
}

function getPhpUnitVersion($phpUnitConfigFile = null)
{
    if (PHP_VERSION_ID >= 70200) {
        // PHPUnit 6 is required for PHP 7.2+
        $PHPUNIT_VERSION = getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_VERSION', '6.5');
    } elseif (PHP_VERSION_ID >= 50600) {
        // PHPUnit 4 does not support PHP 7
        $PHPUNIT_VERSION = getEnvVar($phpUnitConfigFile, 'SYMFONY_PHPUNIT_VERSION', '5.7');
    } else {
        // PHPUnit 5.1 requires PHP 5.6+
        $PHPUNIT_VERSION = '4.8';
    }

    return $PHPUNIT_VERSION;
}

function getEnvVar($phpUnitConfigFile, $name, $default = false)
{
    // Search first for given env variables
    if (false !== $value = getenv($name)) {
        return $value;
    }

    if (file_exists($phpUnitConfigFile)) {
        // Load phpunit config files and search for the env variable
        $phpunitConfig = new DomDocument();
        $phpunitConfig->load($phpUnitConfigFile);

        $var = new DOMXpath($phpunitConfig);
        foreach ($var->query('//php/env[@name="'.$name.'"]') as $var) {
            return $var->getAttribute('value');
        }
    }

    return $default;
}

function loadPhpConfigFiles() {
    global $argv;

    $phpUnitConfigFiles = [];

    // Use configuration file current folder when no arguments given
    if (!isset($argv[1])) {
        if (file_exists('phpunit.xml')) {
            $phpUnitConfigFiles[] = realpath('phpunit.xml');
        } elseif (file_exists('phpunit.xml.dist')) {
            $phpUnitConfigFiles[] = realpath('phpunit.xml.dist');
        } else {
            outputError('No phpunit.xml.dist file found!');
        }

        return $phpUnitConfigFiles;
    }

    // Use config file when given it over -c argument
    if (($configArgumentNr = array_search('-c', $argv))
        || ($configArgumentNr = array_search('--cconfiguration', $argv)))
    {
        ++$configArgumentNr;

        if (!isset($argv[$configArgumentNr])) {
            outputError('Please provide a configuration file when using "-c" argument!');

            exit(1);
        }

        $phpUnitConfigFiles[] = realpath($argv[$configArgumentNr]);

        // following arguments are given manully to the phpunit process
        unset($argv[$configArgumentNr]);
        unset($argv[$configArgumentNr - 1]);

        return $phpUnitConfigFiles;
    }

    if (isset($argv[1]) && 'symfony' === $argv[1] && !file_exists('symfony') && file_exists('src/Symfony')) {
        // If symfony if given set the folder to src/Symfony
        $argv[1] = 'src/Symfony';
    }

    // Find all config file when folder given
    if (is_dir($argv[1])) {
        $finder = new RecursiveDirectoryIterator($argv[1], FilesystemIterator::KEY_AS_FILENAME | FilesystemIterator::UNIX_PATHS);
        $finder = new RecursiveIteratorIterator($finder);
        $finder->setMaxDepth(getenv('SYMFONY_PHPUNIT_MAX_DEPTH') ?: 3);

        foreach ($finder as $file => $fileInfo) {
            // Prefer phpunit.xml over phpunit.xml.dist file
            $folder = dirname($fileInfo->getPathname());
            if ('phpunit.xml.dist' === $file && !isset($phpUnitConfigFiles[$folder])) {
                $phpUnitConfigFiles[$folder] = realpath($fileInfo->getPathname());
            } elseif ('phpunit.xml' === $file) {
                $phpUnitConfigFiles[$folder] = realpath($fileInfo->getPathname());
            }
        }

        ksort($phpUnitConfigFiles);

        array_values($phpUnitConfigFiles);

        if (0 === count($phpUnitConfigFiles)) {
            outputError('No configuration files found in: ' . getcwd() . $argv[1]);
        }

        unset($argv[1]); // $argv[1] should not provided to phpunit process
    } elseif(file_exists($argv[1])) {
        $phpUnitConfigFiles[] = $argv[1];

        unset($argv[1]); // $argv[1] should not provided to phpunit process
    }

    return $phpUnitConfigFiles;
}

function outputError($text, $exitCode = 1)
{
    echo "\033[41m" . $text . "\033[0m" . PHP_EOL;

    exit($exitCode);
}
